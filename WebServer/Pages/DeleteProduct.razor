@page "/deleteProduct/{id:int}"
@inject IProductServices _services;
@inject NavigationManager _navigationManager;
@inject IToastService _toastService;

<PageTitle>Productos</PageTitle>

<h1>Productos</h1>
<p style="color:red"> Esta seguro que desea eliminar @product?.Description?</p>


<EditForm Model="product">
    <div class="row">
        <div class="col-sm-4">
            <label>Descripcion</label>
            <input class="form-control col-sm-4" type="text" disabled @bind="product.Description"></input>
        </div>
    </div>
    <div class="row" style="margin-top:20px;">
        <div class="col-sm-4">
            <label>Precio</label>
            <input class="form-control col-sm-4" type="number" step="0.1" min="0.1" disabled @bind="product.DollarPrice"></input>
        </div>
    </div>
    <div class="row" style="margin-top:20px;">
        <div class="col-sm-4">
            <input class="btn btn-success" type="submit" value="Regresar" @onclick="Regresar" />
            <input class="btn btn-primary" type="submit" value="Aceptar" @onclick="Eliminar" />
        </div>
    </div>
</EditForm>

@code {

    [Parameter]
    public int Id { get; set; }

    private Product product = new Product();

    protected override async Task OnInitializedAsync()
    {
        product = await _services.GetProduct(Id);

        if (product == null)
        {
            _navigationManager.NavigateTo("/NotFound");
        }
    }

    private async Task Eliminar()
    {
        string message = await _services.DeleteProduct(product.Id);

        if (message.Contains("Error"))
        {
            _toastService.ShowError(message);
        }

        else
        {
            _toastService.ShowSuccess(message);
        }

        _navigationManager.NavigateTo("/products");
    }

    private void Regresar()
    {
        _navigationManager.NavigateTo("/products");
    }
}

